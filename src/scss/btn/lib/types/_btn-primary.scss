// Mixin defining a primary button
// Notes:
// - All arguments default to variables set in buttons-settings.
//
// - Theme keys must be stored in the `$map-btn-themes-primary` in
//   `_buttons-themes.scss`
//
// - If passing individual arguments you must pass null as the first argument
// - and use name arguments unless all arguments are passed [see underloaded example].
//
// Examples:
// default:     btn-primary() red background white text
// theme:       btn-primary(red)
// overloaded:  btn-primary(null, #000, #fff, #fff, #000, #e53d46, #000)
// underloaded: btn-primary(null, $font-color: #000)


@mixin btn-primary (
		$theme: null,
		$bg-color: $btn-bg-color,
		$bg-color-active: $btn-bg-color-active,
		$font-color: $btn-font-color,
		$font-color-active: $btn-font-color-active,
		$icon-fill: $btn-icon-fill,
		$icon-fill-active: $btn-icon-fill-active,
		$size: null,
		$double: null,
		$block: null
	)

{
	// Check for theme and set args to those values
	@if $theme {
		$map: map-get($map-btn-themes-primary, $theme);
		$bg-color: map-get($map, bg-color);
		$bg-color-active: map-get($map, bg-color-active);
		$font-color: map-get($map, font-color);
		$font-color-active: map-get($map, font-color-active);
		$icon-fill: map-get($map, icon-fill);
		$icon-fill-active: map-get($map, icon-fill-active);
	}
	// include shared styles of non floating button
	@include btn-base();

	// include button transition properties
	@include btn-hover-transition();
	// doube and double-single handle their own display
	@if not $double {
		// jumbo or micro is passed through when this is called from an alias
		@include btn-size($size);
		@if $block == true {
			display: block;
			width: 100%;
		} @else {
			display: inline-block;
		}
		// add border defs
		border-style: $btn-border-style;
		border-width: $btn-border-width;
	}
	border-color: $bg-color;
	color: $font-color;
	background-color: $bg-color;
	.icon {
		@if $icon-fill { // if specified
		fill: $icon-fill;
		} @else { // else same as font color
		fill: $font-color;
		}
	}

	&:visited {
		color: $font-color;
	}

	&:active,
	&:focus,
	&:hover {
		color: $font-color-active;
		background-color: $bg-color-active;
		border-color: $bg-color-active;


		.icon {
			@if $icon-fill { // if specified
			fill: $icon-fill-active;
			} @else { // else same as font color active
			fill: $font-color-active;
			}
		}
	}

	// Disabled State
	//
	// The disabled state uses the class .disabled, is-disabled,
	// and the form attribute disabled="disabled".
	// The use of !important is only added because this is a state
	// that must be applied to all buttons when in a disabled state.
	// &.disabled,
	// &.is-disabled,
	// &:disabled {}
}
