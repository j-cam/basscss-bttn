// ======================================
// Strip Unit Values
// ======================================
// @param {string} $num
// @example scss
// Input:  .foo{ some-property: strip-unit(30px); }
// Output: .foo{ some-property: 30; }
// @returns {number}
// ======================================
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// ======================================
// String Replace
// ======================================
//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if($index,
        str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
        $string);
}
// ======================================
// Rem: convert px to rem
// ======================================
// @param {string} $num
// @example scss
// Input:  .foo{ font-size: rem(16px); } OR .foo{ font-size: rem(16); }
// Output: .foo{ font-size: 1rem; }
// @returns {string}
// ======================================
@function rem($size_px: $font-size-base) {

  $size: strip-unit($size_px);
  $base: strip-unit($font-size-base);

  @return ($size / $base) + rem;
}

// =============================================
// VW: convert pixels to viewport width units
// basically the same as calculating percentage
// ============================================
// @param {string} $target
// @param {string} $context
// @example scss
// Input:  .foo{ font-size: rem(16px); } OR .foo{ font-size: rem(16); }
// Output: .foo{ font-size: 1rem; }
// @returns {string}
// ======================================
@function vw($target, $context) {
	// convert to percent
	$percent: percentage($target / $context );
	// Strip '%' off the end and add vw
	@return strip-unit($percent)+vw;
}


// Converts the PSD font and line-height to a unitless CSS line-height number
@function line-height( $font_px_val, $psd_lh_px_val: "") {
    @if $psd_lh_px_val=="" {
        @warn "No line height provided assuming auto line height";
        $font_px: strip-unit($font_px_val);
        $lh_px: $font_px * 1.2;
        // line-height/font-size
        @return $lh_px / $font_px;
    }
    @else {
        $font_px: strip-unit( $font_px_val);
        $lh_px: strip-unit( $psd_lh_px_val);
        // line-height/font-size
        @return $lh_px / $font_px;
    }
}

@function lh($font_px_val, $psd_lh_px_val: "") {
    @return line-height($font_px_val, $psd_lh_px_val);
}

// ======================================
// Z (get z-index from map)
// ======================================
// @param  string name of key
// @return string the key value or warning
// @example [scss]
// .foo {
//    z-index: layer('nav')
// }
// ======================================
@function layer($key) {
  @if map-has-key($map-z-indexes, $key) {
    @return map-get($map-z-indexes, $key);
  }
  @warn "Unknown `#{$key}` in $z_indexes.";
  @return null;
}


// ======================================
// SVG URI
// Takes an svg object and returns an
// encoded data-uri wrapped in a css
// ======================================
// url attribute.
//
// @param {$string} $svg
// @example scss
// Input:
// .foo {
//    background-image: svg-uri(<svg><circle/></svg>);
//  }
//  Output:
//  .foo {
//    background-image: url( url("data:image/svg+xml,...");
//  }
//  @attribution https://codepen.io/jakob-e/pen/doMoML
// ======================================
//
//  Function to create an optimized svg url
//
@function svg-uri($svg){
    //
    //  Add missing namespace
    //
    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode
        //
        $chunk: str-replace($chunk,'"', '\'');
        $chunk: str-replace($chunk,'%', '%25');
        $chunk: str-replace($chunk,'&', '%26');
        $chunk: str-replace($chunk,'#', '%23');
        $chunk: str-replace($chunk,'{', '%7B');
        $chunk: str-replace($chunk,'}', '%7D');
        $chunk: str-replace($chunk,'<', '%3C');
        $chunk: str-replace($chunk,'>', '%3E');

        //
        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}
